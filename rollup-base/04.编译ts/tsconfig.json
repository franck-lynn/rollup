{
    // https://segmentfault.com/a/1190000022809326/
    "compilerOptions": {
        /* 基本选项 */
        // / 目标语言的版本
        "target": "es5",
        // 生成代码的模板标准, 是给node用, 还是浏览器用? 是commonjs, amd
        // 是umd这些, 还是es6等,
        "module": "es2015",
        // 指定生成代码的模板标准

        "removeComments": true, // 删除注释
        // "preserveConstEnums": true,  // 保留 const 和 enum 声明
        // 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应
        // 设置"module": "AMD",
        // "outFile": "./app.js",
        // TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要
        // 使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要
        // 引入"ES2019.Array",
        "lib": ["es2015", "es2016", "es2017", "dom"],
        "allowJs": true, // 允许编译器编译JS，JSX文件
        "checkJs": true, // 允许在JS文件中报错，通常与allowJS一起使用
        "outDir": "dist", // 指定输出目录
        // 指定输出的根目录, 控制 outDir的目录结构
        "rootDir": "./",
        "strict": true, // 开启所有严格的类型检查
        // "alwaysStrict": true, // 在代码中注入'use strict'
        // "strictNullChecks": true, // 不允许把null、undefined赋值给其他类型的变量
        // "strictFunctionTypes": true, // 不允许函数参数双向协变
        // "strictPropertyInitialization": true, // 类的实例属性必须初始化
        // "noImplicitAny": true, // 不允许隐式的any类型
        // "strictBindCallApply": true, // 严格的bind/call/apply检查
        // "noImplicitThis": true, // 不允许this有隐式的any类型
        // "noUnusedParameters": true, // 检查未使用的函数参数(只提示不报错)

        /* source map 配置项 */
        "sourceMap": true, // 生成目标文件的sourceMap文件
        // 生成目标文件的inline SourceMap，inline SourceMap会包含在生成的js文件中
        // "inlineSourceMap": true, // 把sourceMap 打包到bundle, 以base64保存
        // "declarationMap": true, // 为声明文件生成sourceMap
        // "noEmit": true, // 不输出文件,即编译后不会生成任何js文件
        // "noEmitOnError": true, // 发送错误时不输出任何文件
        // 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用
        // "noEmitHelpers": true,
        // "importHelpers": true, // 通过tslib引入helper函数，文件必须是模块
        // 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现
        // "downlevelIteration": true,
        // 防止switch语句贯穿(即如果没有break语句后面不会执行)
        "noFallthroughCasesInSwitch": true,
        "noImplicitReturns": true, //每个分支都会有返回值

        /* 模块解析配置项 */
        // "noUnusedLocals": true, // 检查只声明、未使用的局部变量(只提示不报错)
        // "allowUmdGlobalAccess": true, // 允许在模块中全局变量的方式访问umd模块
        "esModuleInterop": true, // 允许export=导出，由import from 导入
        // 模块解析策略，ts默认用node的解析策略，即相对的方式导入
        "moduleResolution": "node",

        "declaration": true, // 生成声明文件，开启后会自动生成声明文件
        // "emitDeclarationOnly": true, // 只生成声明文件，而不会生成js文件
        // 指定生成声明文件存放目录
        "declarationDir": "dist/typings",
        // 声明文件目录，默认时node_modules/@types,
        // 让ts知道从哪里去找声明文件, 去掉这个会一致向上找 node_modules/@types 里的文件声明
        // "typeRoots": ["node_modules/@types"],
        // 加载的声明文件包, 告诉ts哪里还有声明包文件可以加载
        // 当没有这个文件夹是就不用配置这个选项
        // "types": ["typings"],

        "baseUrl": "./", // 解析非相对模块的基地址，默认是当前目录
        "paths": {
            // 路径映射，相对于baseUrl
            // 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置
            // "jquery": ["node_modules/jquery/dist/jquery.min.js"]
        },
        // 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，
        // 这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错
        // "rootDirs": ["src", "out"],
        // 此模块是使用 “export =“ 声明的，只能在使用 “allowSyntheticDefaultImports“ 标志时进行默认导入
        // "allowSyntheticDefaultImports": true,

        /* 试验特性配置项 */
        // "experimentalDecorators": true, // 支持 es7 装饰器
        // "emitDecoratorMetadata": true, // 试验的特性, 支持 装饰器

        "resolveJsonModule": true, // 解析 json 模块
        /* 高级选项 */
        "skipLibCheck": true, // 跳过声明文件的检查
        "forceConsistentCasingInFileNames": true /* Disallow inconsistently-cased references to the same file. */
    }
    // files 属性作用是指定需要编译的单个文件列表。
    // 默认包含当前目录和子目录下所有 TypeScript 文件
    // 指定编译文件, files 配置项是一个数组, 用来指定待编译文件,
    // 即入口文件, 但入口文件依赖其他文件时, 也不需要其他文件被
    // 指定, 因为编译器可以自动将依赖拉进来
    // "files": ["src/main.ts"]
}
